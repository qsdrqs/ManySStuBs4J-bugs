diff --git a/buggy/src/com/google/javascript/jscomp/JSDocInfoPrinter.java b/fixed/src/com/google/javascript/jscomp/JSDocInfoPrinter.java
index a3ed329f8..075a1e09d 100644
--- a/buggy/src/com/google/javascript/jscomp/JSDocInfoPrinter.java
+++ b/fixed/src/com/google/javascript/jscomp/JSDocInfoPrinter.java
@@ -82,13 +82,13 @@ public final class JSDocInfoPrinter {
       for (String name : info.getParameterNames()) {
         sb.append("@param {");
         appendTypeNode(sb, info.getParameterType(name).getRoot());
-        sb.append("} " + name + " ");
+        sb.append("} " + name + "\n");
       }
     }
     if (info.hasReturnType()) {
       sb.append("@return {");
       appendTypeNode(sb, info.getReturnType().getRoot());
-      sb.append("} ");
+      sb.append("}\n");
     }
     if (info.hasThisType()) {
       sb.append("@this {");
@@ -98,7 +98,7 @@ public final class JSDocInfoPrinter {
       } else {
         appendTypeNode(sb, typeNode);
       }
-      sb.append("} ");
+      sb.append("}\n");
     }
     if (info.hasBaseType()) {
       sb.append("@extends {");
@@ -108,7 +108,7 @@ public final class JSDocInfoPrinter {
       } else {
         appendTypeNode(sb, typeNode);
       }
-      sb.append("} ");
+      sb.append("}\n");
     }
     for (JSTypeExpression type : info.getImplementedInterfaces()) {
       sb.append("@implements {");
@@ -118,12 +118,12 @@ public final class JSDocInfoPrinter {
       } else {
         appendTypeNode(sb, typeNode);
       }
-      sb.append("} ");
+      sb.append("}\n");
     }
     if (info.hasTypedefType()) {
       sb.append("@typedef {");
       appendTypeNode(sb, info.getTypedefType().getRoot());
-      sb.append("} ");
+      sb.append("}\n");
     }
     if (info.hasType()) {
       if (info.isInlineType()) {
@@ -133,18 +133,18 @@ public final class JSDocInfoPrinter {
       } else {
         sb.append("@type {");
         appendTypeNode(sb, info.getType().getRoot());
-        sb.append("} ");
+        sb.append("}\n");
       }
     }
     if (!info.getThrownTypes().isEmpty()) {
       sb.append("@throws {");
       appendTypeNode(sb, info.getThrownTypes().get(0).getRoot());
-      sb.append("} ");
+      sb.append("}\n");
     }
     if (info.hasEnumParameterType()) {
       sb.append("@enum {");
       appendTypeNode(sb, info.getEnumParameterType().getRoot());
-      sb.append("} ");
+      sb.append("}\n");
     }
     sb.append("*/");
     return sb.toString();
