diff --git a/buggy/test/src/edu/stanford/nlp/naturalli/RelationTripleSegmenterTest.java b/fixed/test/src/edu/stanford/nlp/naturalli/RelationTripleSegmenterTest.java
index 0dd08e75c..6b0fc3fac 100644
--- a/buggy/test/src/edu/stanford/nlp/naturalli/RelationTripleSegmenterTest.java
+++ b/fixed/test/src/edu/stanford/nlp/naturalli/RelationTripleSegmenterTest.java
@@ -184,20 +184,18 @@ public class RelationTripleSegmenterTest extends TestCase {
     assertEquals("yarn", blueCatsPlayWithYarn().objectGloss());
   }
 
-  // todo [cdm 2019]: Really "with yarn" should be obl:with now.
   public void testBlueCatsPlayWithYarn() {
     Optional<RelationTriple> extraction = mkExtraction(
         "1\tblue\t2\tamod\n" +
         "2\tcats\t3\tnsubj\n" +
         "3\tplay\t0\troot\n" +
         "4\twith\t5\tcase\n" +
-        "5\tyarn\t3\tnmod:with\n"
+        "5\tyarn\t3\tobl:with\n"
     );
     assertTrue("No extraction for sentence!", extraction.isPresent());
     assertEquals("1.0\tblue cats\tplay with\tyarn", extraction.get().toString());
   }
 
-  // todo [cdm 2019]: Really "with yarn" should be obl:with now.
   public void testBlueCatsPlayQuietlyWithYarn() {
     Optional<RelationTriple> extraction = mkExtraction(
             "1\tblue\t2\tamod\n" +
@@ -205,35 +203,34 @@ public class RelationTripleSegmenterTest extends TestCase {
             "3\tplay\t0\troot\n" +
             "4\tquietly\t3\tadvmod\n" +
             "5\twith\t6\tcase\n" +
-            "6\tyarn\t3\tnmod:with\n"
+            "6\tyarn\t3\tobl:with\n"
     );
     assertTrue("No extraction for sentence!", extraction.isPresent());
     assertEquals("1.0\tblue cats\tplay quietly with\tyarn", extraction.get().toString());
   }
 
-  // todo [cdm 2019]: dobj should be obj now.
   public void testCatsHaveTails() {
     Optional<RelationTriple> extraction = mkExtraction(
             "1\tcats\t2\tnsubj\n" +
             "2\thave\t0\troot\n" +
-            "3\ttails\t2\tdobj\n"
+            "3\ttails\t2\tobj\n"
     );
     assertTrue("No extraction for sentence!", extraction.isPresent());
     assertEquals("1.0\tcats\thave\ttails", extraction.get().toString());
   }
 
-  // todo [cdm 2019]: dobj should be obj now.
   public void testrabbitsEatVegetables() {
     Optional<RelationTriple> extraction = mkExtraction(
         "1\trabbits\t2\tnsubj\n" +
         "2\teat\t0\troot\n" +
-        "3\tvegetables\t2\tdobj\n"
+        "3\tvegetables\t2\tobj\n"
     );
     assertTrue("No extraction for sentence!", extraction.isPresent());
     assertEquals("1.0\trabbits\teat\tvegetables", extraction.get().toString());
   }
 
   // todo [cdm 2019]: "to" should be mark now.
+  // to's dependency should be mark, not aux
   public void testFishLikeToSwim() {
     Optional<RelationTriple> extraction = mkExtraction(
             "1\tfish\t2\tnsubj\n" +
@@ -257,14 +254,13 @@ public class RelationTripleSegmenterTest extends TestCase {
     assertEquals("1.0\tfish\tlike to\tswim", extraction.get().toString());
   }
 
-  // todo [cdm 2019]: Really "with yarn" should be obl:with now.
   public void testMyCatsPlayWithYarn() {
     Optional<RelationTriple> extraction = mkExtraction(
         "1\tmy\t2\tnmod:poss\n" +
         "2\tcats\t3\tnsubj\n" +
         "3\tplay\t0\troot\n" +
         "4\twith\t5\tcase\n" +
-        "5\tyarn\t3\tnmod:with\n"
+        "5\tyarn\t3\tobl:with\n"
     );
     assertTrue("No extraction for sentence!", extraction.isPresent());
     assertEquals("1.0\tmy cats\tplay with\tyarn", extraction.get().toString());
@@ -312,25 +308,25 @@ public class RelationTripleSegmenterTest extends TestCase {
   }
 
   // todo [cdm 2019]: "as president" is either obl:as or probably should be xcomp
+  // todo: check parser to see what it actually produces.  obl:as is ok according to chris
   public void testHeWasInaugurated() {
     Optional<RelationTriple> extraction = mkExtraction(
             "1\the\t3\tnsubj:pass\n" +
             "2\twas\t3\taux:pass\n" +
             "3\tinaugurated\t0\troot\n" +
             "4\tas\t5\tcase\n" +
-            "5\tpresident\t3\tnmod:as\n"
+            "5\tpresident\t3\tobl:as\n"
     );
     assertTrue("No extraction for sentence!", extraction.isPresent());
     assertEquals("1.0\the\twas inaugurated as\tpresident", extraction.get().toString());
   }
 
-  // todo [cdm 2019]: "as president" is either obl:as or probably should be xcomp
   public void testPPAttachment() {
     Optional<RelationTriple> extraction = mkExtraction(
             "1\the\t2\tnsubj\n" +
             "2\tserved\t0\troot\n" +
             "3\tas\t4\tcase\n" +
-            "4\tpresident\t2\tnmod:as\n" +
+            "4\tpresident\t2\tobl:as\n" +
             "5\tof\t8\tcase\n" +
             "6\tHarvard\t8\tcompound\n" +
             "7\tLaw\t8\tcompound\n" +
@@ -368,24 +364,22 @@ public class RelationTripleSegmenterTest extends TestCase {
     assertEquals("1.0\tObama\twas named\t2009 Nobel Peace Prize Laureate", extraction.get().toString());
   }
 
-  // todo [cdm 2019]: tmod should be obl:tmod
   public void testPassiveNSubj() {
     Optional<RelationTriple> extraction = mkExtraction(
         "1\tHRE\t3\tnsubj:pass\n" +
         "2\twas\t3\taux:pass\n" +
         "3\tfounded\t0\troot\n" +
         "4\tin\t5\tcase\n" +
-        "5\t1991\t3\tnmod:in\n"
+        "5\t1991\t3\tobl:in\n"
     );
     assertTrue("No extraction for sentence!", extraction.isPresent());
     assertEquals("1.0\tHRE\twas founded in\t1991", extraction.get().toString());
 
-    // todo [cdm 2019]: tmod should be obl:tmod
     extraction = mkExtraction(
         "1\tfounded\t0\troot\n" +
         "2\tHRE\t1\tnsubj:pass\n" +
         "3\tin\t4\tcase\n" +
-        "4\t2003\t1\tnmod:in\n"
+        "4\t2003\t1\tobl:in\n"
     );
     assertTrue("No extraction for sentence!", extraction.isPresent());
     assertEquals("1.0\tHRE\tfounded in\t2003", extraction.get().toString());
@@ -425,13 +419,13 @@ public class RelationTripleSegmenterTest extends TestCase {
     assertEquals("1.0\tTim\t's father is\tTom", extraction.get().toString());
   }
 
-  // todo [cdm 2019]: Really "in Tucson" should be obl:with now.
+  // todo [cdm 2019]: Really "in Tucson" should be obl:in now.
   public void testApposInObject() {
     Optional<RelationTriple> extraction = mkExtraction(
         "1\tNewspaper\t2\tnsubj\n" +
         "2\tpublished\t0\troot\n" +
         "3\tin\t4\tcase\n" +
-        "4\tTucson\t2\tnmod:in\n" +
+        "4\tTucson\t2\tobl:in\n" +
         "5\tArizona\t4\tappos\n"
     );
     assertTrue("No extraction for sentence!", extraction.isPresent());
@@ -467,7 +461,7 @@ public class RelationTripleSegmenterTest extends TestCase {
         "1\tTom\t5\tnsubj:pass\n" +
         "2\tand\t1\tcc\n" +
         "3\tJerry\t1\tconj:and\n" +
-        "4\twere\t5\taux:pass\n" +
+        "4\twere\t5\taux\n" +   // changed aux:pass to aux
         "5\tfighting\t0\troot\n"
     );
     assertTrue("No extraction for sentence!", extraction.isPresent());
