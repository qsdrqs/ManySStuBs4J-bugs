diff --git a/buggy/tool/test/org/antlr/v4/test/TestNonGreedyLoops.java b/fixed/tool/test/org/antlr/v4/test/TestNonGreedyLoops.java
index 3d196f3..6a5c024 100644
--- a/buggy/tool/test/org/antlr/v4/test/TestNonGreedyLoops.java
+++ b/fixed/tool/test/org/antlr/v4/test/TestNonGreedyLoops.java
@@ -195,7 +195,7 @@ public class TestNonGreedyLoops extends BaseTest {
 					 "\n" +
 					 "Decision 1:\n" +
 					 "s0-INT->:s1=>2\n", found);  // resolves INT EOF to alt 1 from s since ambig 'tween a and b
-		assertEquals("line 1:2 reportAmbiguity d=0: {1..2}:[(1,1,[]), (1,2,[])],conflictingAlts={1..2}, input=34\n" +
+		assertEquals("line 1:2 reportAmbiguity d=0: ambigAlts={1..2}:[(1,1,[]), (1,2,[])],conflictingAlts={1..2}, input='34'\n" +
 					 "line 1:0 extraneous input '34' expecting <EOF>\n",
 					 this.stderrDuringParse);
 	}
@@ -516,8 +516,8 @@ public class TestNonGreedyLoops extends BaseTest {
 					 "s1-ID->s2\n" +
 					 "s2-'>'->s3\n" +
 					 "s2-ID->s2\n" +
-					 "s3-EOF->:s6=>1\n" +
-					 "s3-'<'->:s4=>1\n" +
+					 "s3-EOF->s6^\n" +
+					 "s3-'<'->s4^\n" +
 					 "s3-ID->s3\n" +
 					 "\n" +
 					 "Decision 2:\n" +
@@ -527,9 +527,11 @@ public class TestNonGreedyLoops extends BaseTest {
 					 "Decision 3:\n" +
 					 "s0-'>'->:s2=>2\n" +
 					 "s0-ID->:s1=>1\n", found);
-		assertEquals("line 1:6 reportAmbiguity d=1: {1..2}:[(26,1,[14 6]), (33,1,[14 6]), (22,1,[14 6]), (20,1,[14 6]), (16,1,[6]), (1,1,[]), (22,2,[14 6]), (26,2,[14 6]), (33,2,[14 6]), (20,2,[14 6]), (16,2,[6]), (1,2,[])],conflictingAlts={1..2}, input=<a>foo<\n" +
-					 "line 1:10 reportAmbiguity d=1: {1..2}:[(35,1,[]), (35,2,[])],conflictingAlts={1..2}, input=</a>\n" +
-					 "line 1:7 reportAmbiguity d=2: {1..2}:[(26,1,[14 6]), (33,1,[14 6]), (26,2,[14 6]), (33,2,[14 6])],conflictingAlts={1..2}, input=/\n",
+		assertEquals("line 1:6 reportAttemptingFullContext d=1: [(20,1,[14 6]), (16,2,[6])], input='<a>foo<'\n" +
+					 "line 1:6 reportAmbiguity d=1: ambigAlts={1..2}:[(26,1,[32 32 32 32 14 6]), (33,1,[14 6]), (22,1,[14 6 10 10]), (26,1,[14 6 10 10]), (33,1,[14 6 10 10]), (20,1,[14 6 10 10 10]), (16,1,[6 10 10 10]), (1,1,[]), (22,2,[14 6 10 10 10 10]), (26,2,[14 6 10 10 10 10]), (33,2,[14 6 10 10 10 10]), (20,2,[14 6 10 10 10 10 10]), (16,2,[6 10 10 10 10 10]), (1,2,[])],conflictingAlts={1..2}, input='<a>foo<'\n" +
+					 "line 1:10 reportAttemptingFullContext d=1: [(20,1,[14 6]), (16,2,[6])], input='</a>'\n" +
+					 "line 1:10 reportAmbiguity d=1: ambigAlts={1..2}:[(35,1,[]), (35,2,[])],conflictingAlts={1..2}, input='</a>'\n" +
+					 "line 1:7 reportAmbiguity d=2: ambigAlts={1..2}:[(26,1,[]), (33,1,[]), (26,2,[]), (33,2,[])],conflictingAlts={1..2}, input='/'\n",
 					 this.stderrDuringParse);
 
 		found = execParser("T.g", grammar, "TParser", "TLexer", "s",
@@ -545,8 +547,8 @@ public class TestNonGreedyLoops extends BaseTest {
 					 "s1-ID->s2\n" +
 					 "s2-'>'->s3\n" +
 					 "s2-ID->s2\n" +
-					 "s3-EOF->:s5=>1\n" +
-					 "s3-'<'->:s4=>1\n" +
+					 "s3-EOF->s5^\n" +
+					 "s3-'<'->s4^\n" +
 					 "\n" +
 					 "Decision 2:\n" +
 					 "s0-'/'->:s2=>1\n" +
@@ -572,8 +574,8 @@ public class TestNonGreedyLoops extends BaseTest {
 					 "s2-ID->s2\n" +
 					 "s2-STR->s2\n" +
 					 "s2-INT->s2\n" +
-					 "s3-EOF->:s5=>1\n" +
-					 "s3-'<'->:s4=>1\n" +
+					 "s3-EOF->s5^\n" +
+					 "s3-'<'->s4^\n" +
 					 "\n" +
 					 "Decision 2:\n" +
 					 "s0-'/'->:s1=>1\n" +
