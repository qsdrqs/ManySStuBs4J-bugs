diff --git a/buggy/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java b/fixed/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java
index 9e31759b5..18e92124e 100644
--- a/buggy/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java
+++ b/fixed/community/embedded-examples/src/test/java/org/neo4j/examples/AclExampleTest.java
@@ -185,7 +185,7 @@ public class AclExampleTest extends AbstractJavaDocTestbase
         
         //Files
         //TODO: can we do open ended?
-        String query = "start root=node:node_auto_index(name = 'FileRoot') match (root)-[:contains*]->()-[:leaf]->(file) return file";
+        String query = "start root=node:node_auto_index(name = 'FileRoot') match (root)-[:contains*0..]->()-[:leaf]->(file) return file";
         gen.get().addSnippet( "query1", createCypherSnippet( query ) );
         String result = engine.execute( parser.parse( query ) ).toString();
         assertTrue( result.contains("File1") );
@@ -193,7 +193,7 @@ public class AclExampleTest extends AbstractJavaDocTestbase
                 .addSnippet( "result1", createQueryResultSnippet( result ) );
         
         //Ownership
-        query = "start root=node:node_auto_index(name = 'FileRoot') match (root)-[:contains*]->()-[:leaf]->(file)<-[:owns]-(user) return file, user";
+        query = "start root=node:node_auto_index(name = 'FileRoot') match (root)-[:contains*0..]->()-[:leaf]->(file)<-[:owns]-(user) return file, user";
         gen.get().addSnippet( "query2", createCypherSnippet( query ) );
         result = engine.execute( parser.parse( query ) ).toString();
         assertTrue( result.contains("File1") );
@@ -209,11 +209,8 @@ public class AclExampleTest extends AbstractJavaDocTestbase
         query = "START file=node:node_auto_index('name:File*') " +
         		"MATCH " +
         		"file<-[:leaf]-dir, " +
-        		"path = dir<-[:contains*]-parent, " +
-        		"parent<-[?:canRead]-role2-[:member]->readUserMoreThan1DirUp, " +
-                "dir<-[?:canRead]-role1-[:member]->readUser1DirUp " +
-        		//TODO: would like to get results the order I specify
-        		"RETURN file, role1, readUser1DirUp, role2, readUserMoreThan1DirUp";
+        		"dir<-[:contains*0..]-parent<-[?:canRead]-role-[:member]->readUser " +
+        		"RETURN file, dir, role, readUser";
         gen.get().addSnippet( "query3", createCypherSnippet( query ) );
         result = engine.execute( parser.parse( query ) ).toString();
         assertTrue( result.contains("File1") );
